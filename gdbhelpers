define startupbreakpoints
	set osabi none
	set scheduler-locking step
	set range-stepping on
	thbreak entry
	commands
		#too much hbreak isr_entry_14
		hb isr_entry_13
		hb cpu_debug_break
		b unhandled_exception_handler
		b apic_spurious_handler
		b isr_entry_8
	end

	b modload_load_symbols
	commands
		eval "add-symbol-file %s 0x%lx",$rdi,$rsi
	end
end

define walkstack
	set $addr = $arg0
	set $depth = $arg1
	while $depth--
		set $retaddr=*(long*)($addr+8)
		set $nextframe=*(long*)$addr
		if $retaddr < 0xffffffff80000000
			echo Invalid address, stopping backtrace
			loop_break
		end
		x /1i $retaddr
		set $addr=$nextframe
	end
end

define walkstacksafe
	set $initframe = $arg0
	python
try:
	gdb.execute("walkstack $initframe 8")
except:
	pass
	end
end

define walkthreads
	if $argc == 1
		set $depth = $arg0
	else
		set $depth = 7
	end

	set $savecpu = $_thread

	set $threadcount = thread_count
	set $tid = 0
	while $tid < $threadcount
		echo ---------------------------------------------
		set $ctx = threads[$tid].ctx
		if $ctx != 0
			printf "Thread %d trace:\n", $tid
			x /1i $ctx->gpr.iret.rip
			set $initframe = $ctx->gpr.r.n.rbp
			if $initframe != 0
				walkstacksafe $initframe
				set $tid = $tid + 1
				loop_continue
			else
				echo rbp is null
			end
		end
		set $icpu = 0
		while $icpu < cpu_count
			if cpus[$icpu].cur_thread == &threads[$tid]
				printf "Found thread %d on CPU %d\n", $tid, $icpu
				eval "thread %d", ($icpu + 1)
				walkstacksafe $rbp
				loop_break
			end
			set $icpu = $icpu + 1
		end
		if $icpu == cpu_count
			echo Could not find thread
		end
		set $tid = $tid + 1
	end
	eval "thread %d", $savecpu
end

define findtid
	set $tid = $arg0
	set $cpu_nr = 0
	set $cpu_count = cpu_count
	set $needle = threads + $tid
	while $cpu_nr < $cpu_count
		set $cpu_thr = cpus[$cpu_nr].cur_thread
		if $cpu_thr == $needle
			eval "thread %d", ($cpu_nr + 1)
			eval "print cpus[%d]", ($cpu_nr)
			loop_break
		end
		set $cpu_nr = $cpu_nr + 1
	end
	if $cpu_nr >= $cpu_count
		print "Not running, here's thread context"
		print threads[$tid]
	end
end

define printtids
	set $cpu_nr = 0
	set $cpu_count = cpu_count
	while $cpu_nr < $cpu_count
		print cpus[$cpu_nr++].cur_thread - threads
	end
end
