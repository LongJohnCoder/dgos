#!/usr/bin/env python
import sys
import io

debugging = False
items = []
prefix = None
prefix_value = None
prefix_comment = None

def debug(message):
	if debugging:
		sys.stderr.write(message + '\n')


def define(name, suffix, max_len):
	if name != None or suffix != None:
		f = '#define {}_{}{}'.format(prefix, name, suffix)
	else:
		f = '#define {}'.format(prefix)
	return ('{:<' + str(max_len) + '}').format(f)


def print_comment(comment):
	if not comment is None:
		print('\n// {}'.format(comment))


def write_declarations():
	if prefix == None:
		return

	suffix = ''
	max_len = 0
	for item in items:
		w = len(item['name'])
		n = 8 + len(prefix) + 1 + w + 1 + 8 + 1
		if max_len < n:
			max_len = n
		if item['bit'] + item['bits'] > 32:
			suffix = 'L'

	if prefix_comment != None:
		print('')
		print('//')
		print('// {}: {}'.format(prefix, prefix_comment))
	else:
		print('\n// {0}'.format(prefix))

	if prefix_value != None:
		print('{0} {1}'.format(
			define(None, None, max_len),
			prefix_value
		))

	print('')
	for item in items:
		print('{0} {1}'.format(
			define(item['name'], '_BIT', max_len),
			item['bit']
		))

	print('')
	for item in items:
		print('{0} {1}'.format(
			define(item['name'], '_BITS', max_len),
			item['bits']
		))

	for item in items:
		print('{0} \\\n\t((1U{3} << {1}_{2}_BITS)-1)'.format(
			define(item['name'], '_MASK', max_len),
			prefix, item['name'], suffix
		))

	for item in items:
		print_comment(item['comment'])
		print('{0} \\\n\t({1}_{2}_MASK << {1}_{2}_BIT)'.format(
			define(item['name'], '', max_len),
			prefix, item['name']
		))

	print('')
	for item in items:
		print('{} \\\n\t((n) << {}_{}_BIT)'.format(
			define(item['name'], '_n(n)', max_len),
			prefix, item['name']
		))

	print('')
	for item in items:
		print('{0} \\\n\t(((n) & {1}_{2}) >> {1}_{2}_BIT)'.format(
			define(item['name'], '_GET(n)', max_len),
			prefix, item['name']
		))

	print('')
	for item in items:
		print('{0} \\\n\t(r = ((r) & ~{1}_{2}) | {1}_{2}_n(n))'.format(
			define(item['name'], '_SET(r,n)', max_len),
			prefix, item['name']
		))

print('// THIS FILE IS AUTOMATICALLY GENERATED')
if len(sys.argv) > 1 and sys.argv[1] != '-':
	stream = io.open(sys.argv[1], "r")
	print('// from {}'.format(sys.argv[1]))
else:
	stream = sys.stdin

while True:
	line = stream.readline()

	if not line:
		break

	line = line.strip()

	if line == '' or line[0] == '#':
		continue

	if line.startswith('-- '):
		write_declarations()
		prefix = line[3:].strip()
		pack = prefix.split(' ', 1)
		prefix = pack[0]
		prefix_comment = None
		prefix_value = None
		if len(pack) > 1:
			prefix_comment = pack[1]
		pack = prefix.split('=', 1)
		prefix = pack[0]
		if len(pack) > 1:
			prefix_value = pack[1]
		items = []
		debug('Starting bitfield {}'. format(prefix))
		continue

	if not prefix:
		continue

	pack = line.split(' ', 2)
	if len(pack) > 2:
		bits, name, comment = pack
	else:
		bits, name = pack
		comment = None

	bit_range = bits.split(':')
	hi = int(bit_range[0])
	if len(bit_range) == 2:
		lo = int(bit_range[1])
	else:
		lo = int(bit_range[0])
	width = hi - lo + 1

	items.append({
		'bit': lo,
		'bits': width,
		'name': name,
		'comment': comment
	})

write_declarations()
print('')
